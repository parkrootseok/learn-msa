server:
  port: 8000

spring:
  application:
    name: api-gateway-service

  profiles:
    active: dev

  config:
    import: optional:configserver:http://localhost:8888

  cloud:

    config:
      name: ecommerce

    gateway:

      # Global Filter 추가
      default-filters:
        - name: GlobalFilter
          args:
            baseMessage: Spring Cloud Gateway Global Filter
            preLogger: true
            postLogger: true

      # route 객체 등록
      # ID 설정        - id:
      # URI 설정         uri: http://localhost:${port} or lb://instance-id
      # 조건 설정        predicates:
      #                   - Path=${uri}
      # 필터 추가        filters:
      #                   - name: ${filter-class-name}
      #                     args:1
      routes:

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/login
            - Method=POST
          filters:
            # 매번 새로운 요청으로 인식하기 위해 header 삭제
            - RemoveRequestHeader=Cookie
            # /user-service/(?<segment>.*)로 들어온 URI를 /$\{segment} 형태로 변환
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/users
            - Method=POST
          filters:
            # 매번 새로운 요청으로 인식하기 위해 header 삭제
            - RemoveRequestHeader=Cookie
            # /user-service/(?<segment>.*)로 들어온 URI를 /$\{segment} 형태로 변환
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/**
            - Method=GET
          filters:
            # 매번 새로운 요청으로 인식하기 위해 header 삭제
            - RemoveRequestHeader=Cookie
            # /user-service/(?<segment>.*)로 들어온 URI를 /$\{segment} 형태로 변환
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}
            # 권한 확인 핉터
            - AuthorizationFilter

        - id: user-service
          uri: lb://USER-SERVICE
          predicates:
            - Path=/user-service/actuator/**
            - Method=GET,POST
          filters:
            # 매번 새로운 요청으로 인식하기 위해 header 삭제
            - RemoveRequestHeader=Cookie
            # /user-service/(?<segment>.*)로 들어온 URI를 /$\{segment} 형태로 변환
            - RewritePath=/user-service/(?<segment>.*), /$\{segment}

        - id: catalog-service
          uri: lb://CATALOG-SERVICE
          predicates:
            - Path=/catalog-service/**

        - id: order-service
          uri: lb://ORDER-SERVICE
          predicates:
            - Path=/order-service/**

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

# actuator 관련 설정
management:
  endpoints:
    web:
      exposure:
        include: beans, refresh, health, httpexchanges